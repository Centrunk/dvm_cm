# TODO: stop all centrunk services prior to run
- name: "[PRE] Initial Environment Setup"
  hosts: all
  become: yes
  become_user: root
  tasks:
    - name: Check if CC Service Exists
      stat: path=/etc/systemd/system/centrunk.cc.service
      register: cc_service_status
    - name: Check if VC Service Exists
      stat: path=/etc/systemd/system/centrunk.vc.service
      register: vc_service_status
    - name: Check if DVRS Service Exists
      stat: path=/etc/systemd/system/centrunk.dvrs.service
      register: dvrs_service_status
    - name: Check if CONV Service Exists
      stat: path=/etc/systemd/system/centrunk.conv.service
      register: conv_service_status
    - name: Stop Centrunk CC Services
      ansible.builtin.systemd:
        name: centrunk.cc
        state: stopped
      when: cc_service_status.stat.exists
    - name: Stop Centrunk VC Service
      ansible.builtin.systemd:
        name: centrunk.vc
        state: stopped
      when: vc_service_status.stat.exists
    - name: Stop Centrunk DVRS Service
      ansible.builtin.systemd:
        name: centrunk.dvrs
        state: stopped
      when: dvrs_service_status.stat.exists
    - name: Stop Centrunk Conv Services
      ansible.builtin.systemd:
        name: centrunk.conv
        state: stopped
      when: conv_service_status.stat.exists

# create dictory structure
    - name: Establish Configs
      ansible.builtin.file:
        path: /opt/centrunk/configs
        state: directory
        mode: '0755'

    # install dependancies
    - name: Install Centrunk Dependencies
      ansible.builtin.apt:
        update_cache: true
        pkg:
          - stm32flash
          - python3
          - python3-pip
          - git
          - wget
          - unzip
          - inotify-tools
          - libncurses-dev
          - openssl
          - libssl-dev
          - libasio-dev

# Pull in our source files
- name: Initial CTRS CCM Setup
  hosts: all
  become: yes
  become_user: root
  tasks:
    - name: ARCH
      ansible.builtin.debug:
        var: ansible_architecture
    - name: Download iden_table
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/Centrunk/dvmhost3.5/main/table/iden_table.dat
        dest: /opt/centrunk/configs/iden_table.dat
        owner: root
        group: root
        mode: '0644'
        remote_src: yes
    - name: Download TG ACL
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/Centrunk/dvmhost3.5/main/table/tg_acl.yml
        dest: /opt/centrunk/configs/tg_acl.yml
        owner: root
        group: root
        mode: '0644'
        remote_src: yes

# Build DVMHost Config
- name: Detect configuration and apply proper configuration files.
  hosts: all
  become: yes
  become_user: root
  tasks:
    - name: Generate TRS config files (COMBO).
      ansible.builtin.template:
        src: cc.tplt
        dest: /opt/centrunk/configs/configCC1.yml
        owner: root
        group: root
        mode: '0644'
      when: hostvars[inventory_hostname].vars.type == "COMBO"
    - name: Generate TRS config files (COMBO).
      ansible.builtin.template:
        src: vc.tplt
        dest: /opt/centrunk/configs/configVC1.yml
        owner: root
        group: root
        mode: '0644'
      when: hostvars[inventory_hostname].vars.type == "COMBO"
    - name: Generate TRS config files (CC).
      ansible.builtin.template:
        src: cc.tplt
        dest: /opt/centrunk/configs/configCC1.yml
        owner: root
        group: root
        mode: '0644'
      when: hostvars[inventory_hostname].vars.type == "CC"
    - name: Generate TRS config files (VC).
      ansible.builtin.template:
        src: vc.tplt
        dest: /opt/centrunk/configs/configVC1.yml
        owner: root
        group: root
        mode: '0644'
      when: hostvars[inventory_hostname].vars.type == "VC"
    - name: Generate TRS config files (CONV).
      ansible.builtin.template:
        src: conv.tplt
        dest: /opt/centrunk/configs/configCONV1.yml
        owner: root
        group: root
        mode: '0644'
      when: hostvars[inventory_hostname].vars.type == "CONV"
    - name: Generate TRS config files (DVRS).
      ansible.builtin.template:
        src: dvrs.tplt
        dest: /opt/centrunk/configs/configDVRS1.yml
        owner: root
        group: root
        mode: '0644'
      when: hostvars[inventory_hostname].vars.type == "DVRS"

# Add systemd Services
- name: Configure systemd based on system type.
  hosts: all
  become: yes
  become_user: root
  tasks:
- name: Register unit file for system type COMBO.
  hosts: all
  become: yes
  become_user: root
  tasks:
  - name: Register unit file for system type COMBO (CC).
    ansible.builtin.get_url:
      url: https://raw.githubusercontent.com/Centrunk/dvmhost3.5/main/systemd/centrunk.cc.service
      dest: /etc/systemd/system/centrunk.cc.service
      owner: root
      group: root
      mode: '0644'
      remote_src: yes
    when: hostvars[inventory_hostname].vars.type == "COMBO"
  - name: Register unit file for system type COMBO (VC).
    ansible.builtin.get_url:
      url: https://raw.githubusercontent.com/Centrunk/dvmhost3.5/main/systemd/centrunk.vc.service
      dest: /etc/systemd/system/centrunk.vc.service
      owner: root
      group: root
      mode: '0644'
      remote_src: yes
    when: hostvars[inventory_hostname].vars.type == "COMBO"
  - name: Register unit file for system type CC.
    ansible.builtin.get_url:
      url: https://raw.githubusercontent.com/Centrunk/dvmhost3.5/main/systemd/centrunk.cc.service
      dest: /etc/systemd/system/centrunk.cc.service
      owner: root
      group: root
      mode: '0644'
      remote_src: yes
    when: hostvars[inventory_hostname].vars.type == "CC"
  - name: Register unit file for system type VC.
    ansible.builtin.get_url:
      url: https://raw.githubusercontent.com/Centrunk/dvmhost3.5/main/systemd/centrunk.vc.service
      dest: /etc/systemd/system/centrunk.vc.service
      owner: root
      group: root
      mode: '0644'
      remote_src: yes
    when: hostvars[inventory_hostname].vars.type == "VC"
  - name: Register unit file for system type CONV.
    ansible.builtin.get_url:
      url: https://raw.githubusercontent.com/Centrunk/dvmhost3.5/main/systemd/centrunk.conv.service
      dest: /etc/systemd/system/centrunk.conv.service
      owner: root
      group: root
      mode: '0644'
      remote_src: yes
    when: hostvars[inventory_hostname].vars.type == "CONV"
  - name: Register unit file for system type DVRS.
    ansible.builtin.get_url:
      url: https://raw.githubusercontent.com/Centrunk/dvmhost3.5/main/systemd/centrunk.dvrs.service
      dest: /etc/systemd/system/centrunk.dvrs.service
      owner: root
      group: root
      mode: '0644'
      remote_src: yes
    when: hostvars[inventory_hostname].vars.type == "DVRS"

# start centrunk service
- name: Enable Centrunk CCM Service(s)
  hosts: all
  become: yes
  become_user: root
  tasks:
  - name: Establish Log Directory
    ansible.builtin.file:
      path: /var/log/centrunk
      state: directory
      mode: '0755'
  - name: Enable Service (COMBO)
    ansible.builtin.systemd:
      name: centrunk.vc.service
      enabled: yes
      masked: no
      daemon_reload: yes
    when: hostvars[inventory_hostname].vars.type == "COMBO"
    ansible.builtin.systemd:
      name: centrunk.cc.service
      enabled: yes
      masked: no
      daemon_reload: yes
    when: hostvars[inventory_hostname].vars.type == "COMBO"
  - name: Enable Service (VC)
    ansible.builtin.systemd:
      name: centrunk.vc.service
      enabled: yes
      masked: no
      daemon_reload: yes
    when: hostvars[inventory_hostname].vars.type == "VC"
  - name: Enable Service (CC)
    ansible.builtin.systemd:
      name: centrunk.cc.service
      enabled: yes
      masked: no
      daemon_reload: yes
    when: hostvars[inventory_hostname].vars.type == "CC"
  - name: Enable Service (DVRS)
    ansible.builtin.systemd:
      name: centrunk.dvrs.service
      enabled: yes
      masked: no
      daemon_reload: yes
    when: hostvars[inventory_hostname].vars.type == "DVRS"
  - name: Enable Service (CONV)
    ansible.builtin.systemd:
      name: centrunk.conv.service
      enabled: yes
      masked: no
      daemon_reload: yes
    when: hostvars[inventory_hostname].vars.type == "CONV"
