
- name: "[PRE] Initial Environment Setup"
  hosts: all
  become: yes
  become_user: root
  tasks:
    # install python3, python3-pip, and git
    - name: Install Centrunk Dependencies
      ansible.builtin.apt:
        pkg:
          - stm32flash
          - python3
          - python3-pip
          - git
          - wget
          - unzip
          - inotify-tools
    # download and install dvmhost
    - name: Get DVMHost Code
      ansible.builtin.git:
        repo: https://github.com/DVMProject/dvmhost.git
        dest: /opt/centrunk/dvm
        version: master

- name: Initial CTRS CCM Setup
  hosts: all
  become: yes
  become_user: root
  tasks:
    - name: ARCH
      ansible.builtin.debug:
        var: ansible_architecture
    - name: Clone Utils file from Git.
      ansible.builtin.git:
        repo: https://github.com/Centrunk/ctrs-utils.git
        dest: /opt/centrunk/util
        version: master
    # copy the dvmhost binary
    - name: Move in dvmhost for x86_64
      ansible.builtin.copy:
        src: /opt/centrunk/util/bin/x86_64/dvmhost
        dest: /opt/centrunk/dvm/dvmhost
        owner: root
        group: root
        mode: '0644'
        remote_src: yes
      when: ansible_architecture is search("x86_64")
    - name: Move in dvmcmd for x86_64
      ansible.builtin.copy:
        src: /opt/centrunk/util/bin/x86_64/dvmcmd
        dest: /opt/dvm/dvmcmd
        owner: root
        group: root
        mode: '0644'
        remote_src: yes
      when: ansible_architecture is search("x86_64")

    - name: Move in Binaries for arm
      ansible.builtin.copy:
        src: /opt/centrunk/util/bin/arm/dvmhost
        dest: /opt/dvm/dvmhost
        owner: root
        group: root
        mode: '0644'
        remote_src: yes
      when: ansible_architecture is search("arm*")
    - name: Move in dvmcmd for arm
      ansible.builtin.copy:
        src: /opt/centrunk/util/bin/arm/dvmcmd
        dest: /opt/dvm/dvmcmd
        owner: root
        group: root
        mode: '0644'
        remote_src: yes
      when: ansible_architecture is search("arm*")

- name: Detect configuration and apply proper configuration files.
  hosts: all
  become: yes
  become_user: root
  tasks:
    - name: Generate VOC config file.
      ansible.builtin.template:
        src: voc.tplt
        dest: /opt/dvm/configVOC1.yml
        owner: root
        group: root
        mode: '0644'
      when: hostvars[inventory_hostname].vars.type == "VOC"
    - name: Generate TRS config files (COMBO).
      ansible.builtin.template:
        src: cc.tplt
        dest: /opt/dvm/configCC1.yml
        owner: root
        group: root
        mode: '0644'
      when: hostvars[inventory_hostname].vars.type == "COMBO"
    - name: Generate TRS config files (COMBO).
      ansible.builtin.template:
        src: vc.tplt
        dest: /opt/dvm/configVC1.yml
        owner: root
        group: root
        mode: '0644'
      when: hostvars[inventory_hostname].vars.type == "COMBO"
    - name: Generate TRS config files (CC).
      ansible.builtin.template:
        src: cc.tplt
        dest: /opt/dvm/configCC1.yml
        owner: root
        group: root
        mode: '0644'
      when: hostvars[inventory_hostname].vars.type == "CC"
    - name: Generate TRS config files (VC).
      ansible.builtin.template:
        src: vc.tplt
        dest: /opt/dvm/configVC1.yml
        owner: root
        group: root
        mode: '0644'
      when: hostvars[inventory_hostname].vars.type == "VC"
    - name: Generate TRS config files (CONV).
      ansible.builtin.template:
        src: conv.tplt
        dest: /opt/dvm/configCONV1.yml
        owner: root
        group: root
        mode: '0644'
      when: hostvars[inventory_hostname].vars.type == "CONV"
    - name: Generate TRS config files (DVRS).
      ansible.builtin.template:
        src: dvrs.tplt
        dest: /opt/dvm/configDVRS1.yml
        owner: root
        group: root
        mode: '0644'
      when: hostvars[inventory_hostname].vars.type == "DVRS"

- name: Configure systemd based on system type.  
  hosts: all
  become: yes
  become_user: root
  tasks:
  - name: Register unit file for system type VOC.
    ansible.builtin.copy:
      src: /home/lastation4/ctrs-utils/centrunk.voc.service
      dest: /etc/systemd/system/centrunk.voc.service
      owner: root
      group: root
      mode: '0644'
    when: hostvars[inventory_hostname].vars.type == "VOC"
- name: Register unit file for system type COMBO.
  hosts: all
  become: yes
  become_user: root
  tasks:
  - name: Register unit file for system type COMBO (CC).
    ansible.builtin.copy:
      src: /home/lastation4/ctrs-utils/centrunk.cc.service
      dest: /etc/systemd/system/centrunk.cc.service
      owner: root
      group: root
      mode: '0644'
    when: hostvars[inventory_hostname].vars.type == "COMBO"
  - name: Register unit file for system type COMBO (VC).
    ansible.builtin.copy:
      src: /home/lastation4/ctrs-utils/centrunk.vc.service
      dest: /etc/systemd/system/centrunk.vc.service
      owner: root
      group: root
      mode: '0644'
    when: hostvars[inventory_hostname].vars.type == "COMBO"
  - name: Register unit file for system type CC.
    ansible.builtin.copy:
      src: /home/lastation4/ctrs-utils/centrunk.cc.service
      dest: /etc/systemd/system/centrunk.cc.service
      owner: root
      group: root
      mode: '0644'
    when: hostvars[inventory_hostname].vars.type == "CC"
  - name: Register unit file for system type VC.
    ansible.builtin.copy:
      src: /home/lastation4/ctrs-utils/centrunk.vc.service
      dest: /etc/systemd/system/centrunk.vc.service
      owner: root
      group: root
      mode: '0644'
    when: hostvars[inventory_hostname].vars.type == "VC"
  - name: Register unit file for system type CONV.
    ansible.builtin.copy:
      src: /home/lastation4/ctrs-utils/centrunk.conv.service
      dest: /etc/systemd/system/centrunk.conv.service
      owner: root
      group: root
      mode: '0644'
    when: hostvars[inventory_hostname].vars.type == "CONV"
  - name: Register unit file for system type DVRS.
    ansible.builtin.copy:
      src: /home/lastation4/ctrs-utils/centrunk.dvrs.service
      dest: /etc/systemd/system/centrunk.dvrs.service
      owner: root
      group: root
      mode: '0644'
    when: hostvars[inventory_hostname].vars.type == "DVRS"


# start centrunk service
- name: Enable Centrunk CCM Service(s)
  hosts: all
  become: yes
  become_user: root
  tasks:
  - name: Enable Service (VOC)
    ansible.builtin.systemd:
      name: centrunk.voc.service
      enabled: yes
      masked: no
    when: hostvars[inventory_hostname].vars.type == "VOC"
  - name: Enable Service (COMBO)
    ansible.builtin.systemd:
      name: centrunk.vc.service
      enabled: yes
      masked: no
    ansible.builtin.systemd:
      name: centrunk.cc.service
      enabled: yes
      masked: no
    when: hostvars[inventory_hostname].vars.type == "COMBO"
  - name: Enable Service (VC)
    ansible.builtin.systemd:
      name: centrunk.vc.service
      enabled: yes
      masked: no
    when: hostvars[inventory_hostname].vars.type == "VC"
  - name: Enable Service (CC)
    ansible.builtin.systemd:
      name: centrunk.cc.service
      enabled: yes
      masked: no
    when: hostvars[inventory_hostname].vars.type == "CC"
  - name: Enable Service (DVRS)
    ansible.builtin.systemd:
      name: centrunk.dvrs.service
      enabled: yes
      masked: no
    when: hostvars[inventory_hostname].vars.type == "DVRS"
  - name: Enable Service (CONV)
    ansible.builtin.systemd:
      name: centrunk.conv.service
      enabled: yes
      masked: no
    when: hostvars[inventory_hostname].vars.type == "CONV"